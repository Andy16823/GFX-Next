using LibGFX.Core;
using LibGFX.Graphics.Shader;
using LibGFX.Graphics.Shapes;
using LibGFX.Math;
using OpenTK.Graphics.OpenGL4;
using OpenTK.Mathematics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Rect = LibGFX.Math.Rect;

namespace LibGFX.Graphics
{
    public interface IRenderDevice
    {
        void Init(Window window);
        void Dispose();
        void MakeCurrent();
        void SwapBuffers();
        void UseVsync(bool value);
        bool IsDepthTestEnabled();
        void SetDepthTest(bool value);
        void EnableDepthTest();
        void DisableDepthTest();
        void EnableAlphaBlend();
        void EnableAdditiveBlend();
        void EnableMultiplicativeBlend();
        void EnableScreenBlend();
        (int srcFactor, int dstFactor) GetCurrentBlendMode();
        void SetBlendMode(int srcFactor, int dstFactor);
        void ResetBlendMode();
        void DisableBlend();
        void SetViewport(Viewport viewport);
        Viewport GetViewport();
        void SetViewMatrix(Matrix4 matrix);
        void SetProjectionMatrix(Matrix4 matrix);
        void Clear(int mask);
        void ClearColor(float r, float g, float b, float a);
        void Flush();
        RenderTarget CreateRenderTarget(RenderTargetDescriptor constructorInfo);
        void BindRenderTarget(RenderTarget renderTarget); 
        void ResizeRenderTarget(RenderTarget renderTarget, int width, int height);
        void UnbindRenderTarget();
        int GetFramebufferIndex();
        void DisposeRenderTarget(RenderTarget renderTarget);
        void BuildShaderProgram(ShaderProgram shaderProgram);
        void DisposeShaderProgram(ShaderProgram shaderProgram);
        void AddShaderProgram(String name, ShaderProgram shaderProgram);
        void AddShape(Shape shape);
        void InitShape(Shape shape);
        void DisposeShape(Shape shape);
        ShaderProgram GetShaderProgram(String name);
        void BindShaderProgram(ShaderProgram shaderProgram);
        void UnbindShaderProgram();
        int GetUniformLocation(int program, String name);
        void LoadMaterial(Material material);
        void LoadTexture(Texture texture);
        void LoadCubemap(Cubemap cubemap);
        void DisposeMaterial(Material material);
        void DisposeTexture(Texture texture);
        void DisposeCubemap(Cubemap cubemap);
        void DrawRenderTarget(RenderTarget renderTarget);
        void DrawLine(Vector3 start, Vector3 end, Vector4 color);
        void DrawRect(Math.Rect rect, Vector4 color, float borderWidth = 1.0f, float rotation = 0.0f);
        void FillRect(Math.Rect rect, Vector4 color, float rotation = 0.0f);
        void DrawTexture(Transform transform, Texture texture, Vector4 color);
        void DrawTexture(Transform transform, int textureId, Vector4 color);
        void DrawTexture(Transform transform, int textureId, Vector4 color, float[] uvbuffer);
        void DrawEnviromentTexture3D(Transform transform, Cubemap cubemap, Vector4 color);
        Font LoadFont(String path, int fontsize = 48);
        void DrawString2D(String text, Vector2 position, Font font, Vector4 color, float scale = 1.0f, FontAlignment alignment = FontAlignment.BottomLeft);
        void DisposeFont(Font font);
        void LoadMesh(Mesh mesh);
        void DrawMesh(Transform transform, Mesh mesh);
        void DisposeMesh(Mesh mesh);
        void AddLightSource(string name, Light light);
        void RemoveLightSource(string name);
        IEnumerable<Light> GetAllLightSources();
        T GetLightSource<T>() where T : Light;
        void PrepareShader(String location, bool value);
        void PrepareShader(String location, float value);
        void PrepareShader(String location, int value);
        void PrepareShader(String location, Vector2 value);
        void PrepareShader(String location, Vector3 value);
        void PrepareShader(String location, Vector4 value);
        void PrepareShader(String location, bool transpose, Matrix4 value);
        void PrepareShader(String location, int count, float[] value);
        void PrepareShader(String uniformName, bool transpose, Matrix4[] matrices);
        void PrepareShader(String location, TextureUnit textureUnit, Texture texture);
        int GetError();
    }
}
